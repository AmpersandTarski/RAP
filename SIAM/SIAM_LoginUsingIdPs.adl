CONTEXT UserIdentifiers IN ENGLISH
PURPOSE CONTEXT UserIdentifiers 
{+ While the easiest way for authenticating users is using usernames and passwords,
a more state-of-the-art approach is to use third party Identity Providers for this.
For example, one might allow users to login with Google, or LinkedIn.
This context specifies the terminology and rules for doing this.
This first version limits itself to just authenticate users, which means that 
on a succesful authentication, some userID and an idpID become available, such that
the combination of (idpID,userID) identifies the user (i.e. the Account of the user).
+}

IDENT UIDs: UID(uidIdP,uidUserid)
RELATION uidUserid[UID*UserID] [UNI,TOT] -- Identifier for the user in the realm of the IdP that issued it.
RELATION uidIdP[UID*IdP]    [UNI]     -- Identifier for the third-party IdP that issues the uidUserid. If none is given, the UserID is issued by the application itself.

RELATION accUID[Account*UID] [INJ] -- A UID may serve as an identifier for an Account.
MEANING "An Account registers a UID for whatever the Account applies to"

ROLE ExecEngine MAINTAINS "Set default UserID for Accounts if possible"
RULE "Set default UserID for Accounts if possible": (I-(accUserid;accUserid~));accUID;uidUserid |- accUserid
VIOLATION (TXT "{EX} InsPair;accUserid;Account;", SRC I, TXT ";UserID;", TGT I)

--Discarding stuff is not that helpful, as extensions cannot delete this rule.
--ROLE User MAINTAINS "Discard UIDs that are not used"
--RULE "Discard UIDs that are not used": I[UID] |- accUID~;accUID
--VIOLATION (TXT "Please execute: {EX} DelAtom;UID;", SRC I)

RELATION sessionUID[SESSION*UID] -- The UIDs that have been authenticated, and that point to the sessionAccount

RULE "Additional, or re-authentication, must be for the same account": sessionUID;accUID~ |- sessionAccount

--[Login, Logout]--

RELATION loginUserid[SESSION*UserID]   [UNI] -- Userid that has been authenticated by the IdP
RELATION loginIdP[SESSION*IdP]      [UNI] -- Identifier for the IdP that did the authentication
RELATION loginISOLevel[SESSION*ISOLevel] [UNI] -- Level of Assurance with which the login took place

RULE "Select UID": loginUserid~;loginIdP |- uidUserid~;(I /\ accUID~;accUID);uidIdP
MESSAGE "No account is registered for the provided credentials"
VIOLATION (TXT "Please provide different credentials, or register an account with them")
--VIOLATION (TXT "Voor de combinatie UID/PW = ('", SRC I, TXT "','", TGT I, TXT "') bestaat geen account.")

ROLE ExecEngine MAINTAINS "UID Login"
RULE "UID Login": (loginUserid;uidUserid~ /\ loginIdP;uidIdP~);(I /\ accUID~;accIsActive;accUID) |- sessionUID
MEANING "When a user is authenticated, the UID will become the sessionUID and the corresponding Account will become the sessionAccount (provided it is active)."
VIOLATION (TXT "{EX} InsPair;sessionUID;SESSION;", SRC I, TXT ";UID;", TGT I
          ,TXT "{EX} InsPair;sessionAccount;SESSION;", SRC I, TXT ";Account;", TGT accUID~
          ,TXT "{EX} DelPair;loginUserid;SESSION;", SRC I, TXT ";UserID;", SRC loginUserid
          ,TXT "{EX} DelPair;loginIdP;SESSION;", SRC I, TXT ";IdP;", SRC loginIdP
          ,TXT "{EX} InsPair;sessionAuthISOLevel;SESSION;", SRC I, TXT ";ISOLevel;", SRC loginISOLevel
          ,TXT "{EX} DelPair;loginISOLevel;SESSION;", SRC I, TXT ";ISOLevel;", SRC loginISOLevel
          )

--[Glossary]--

CONCEPT UID "a pair (`IdP`,`UserID`) that may identify a user (account)"

CONCEPT IdP "a character string that represents an authentication service provider"
REPRESENT IdP TYPE ALPHANUMERIC

ENDCONTEXT