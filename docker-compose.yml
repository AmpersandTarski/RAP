version: '3.7'
# to visualize this docker-compose.yml file, if you are on linux, run:
#      docker run --rm -it --name dcv -v $(pwd):/input pmsipilot/docker-compose-viz render -f -m image docker-compose.yml
# run it literally (change NOTHING!) and expect the result in docker-compose.png

volumes:
  rap3-data: 
  db-data:
  letsencrypt:

networks:
  proxy:
    external: true
  db:

services:
  # reverse proxy
  traefik:
    image: "traefik:v2.2"
    container_name: "traefik"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./Traefik/traefik.toml:/etc/traefik/traefik.toml"
      - "./Traefik/conf.d:/etc/traefik/conf.d"
      - "letsencrypt:/letsencrypt"
    networks:
      - proxy
  
  rap3:
    image: ampersandtarski/ampersand-rap:2020
    container_name: rap3
    build:
      context: RAP3
    restart: unless-stopped
    depends_on:
      - db
      - traefik
    environment:
      - AMPERSAND_LOG_CONFIG=logging.yaml
      - AMPERSAND_DEBUG_MODE=true
      - AMPERSAND_PRODUCTION_MODE=false # false => e.g. enables database reset (in production mode not possible)
      - AMPERSAND_DBHOST=db # refers to database service below
      - AMPERSAND_DBUSER=${MYSQL_USER} # from .env file, which must be in the build environment
      - AMPERSAND_DBPASS=${MYSQL_PASSWORD} # from .env file
      - AMPERSAND_DBNAME=rap3
      - AMPERSAND_SERVER_URL=https://${SERVER_HOST_NAME} # from .env file
    volumes:
      - rap3-data:/var/www/data
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - proxy
      - db
    labels:
      traefik.enable: "true"
      traefik.http.routers.rap3-insecure.rule: Host(`rap.cs.ou.nl`) || Host(`rap.localhost`)
      # traefik.http.routers.rap3-insecure.middlewares: redirectToHttps@file,securityHeaders@file
      # traefik.http.routers.rap3.tls.certresolver: letsencrypt
      # traefik.http.routers.rap3.tls.options: safeTLSOptions@file
      # traefik.http.routers.rap3.middlewares: securityHeaders@file
      # traefik.http.routers.rap3.rule: Host(`rap.cs.ou.nl`)
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "100"

  # demo application Klantkaarten
  klantkaart:
    image: ampersandtarski/klantkaart:latest
    container_name: klantkaart
    build:
      context: Demos/Klantkaart
    restart: unless-stopped
    depends_on:
      - db
      - traefik
    networks:
      - proxy
      - db
    environment:
      - AMPERSAND_LOG_CONFIG=logging.yaml
      - AMPERSAND_DEBUG_MODE=true
      - AMPERSAND_PRODUCTION_MODE=false # false => e.g. enables database reset (in production mode not possible)
      - AMPERSAND_DBHOST=db # refers to database service below
      - AMPERSAND_DBUSER=${MYSQL_USER} # from .env file, which must be in the build environment
      - AMPERSAND_DBPASS=${MYSQL_PASSWORD} # from .env file
      - AMPERSAND_DBNAME=klantkaart
      - AMPERSAND_SERVER_URL=https://${SERVER_HOST_NAME} # from .env file
    labels:
      traefik.enable: "true"
      traefik.http.routers.klantkaart-insecure.rule: Host(`klantkaart.localhost`) || Host(`klantkaart.rap.cs.ou.nl`)
      # traefik.http.routers.klantkaart-insecure.middlewares: redirectToHttps@file,securityHeaders@file
      # traefik.http.routers.klantkaart.tls.certresolver: letsencrypt
      # traefik.http.routers.klantkaart.tls.options: safeTLSOptions@file
      # traefik.http.routers.klantkaart.middlewares: securityHeaders@file
      # traefik.http.routers.klantkaart.rule: Host(`klantkaart.rap.cs.ou.nl`)
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "100"
 
  # demo application Enrollment
  enroll:
    image: ampersandtarski/enroll:latest
    container_name: enroll
    build:
      context: Demos/Enroll
    restart: unless-stopped
    depends_on:
      - db
      - traefik
    networks:
      - proxy
      - db
    environment:
      - AMPERSAND_LOG_CONFIG=logging.yaml
      - AMPERSAND_DEBUG_MODE=false
      - AMPERSAND_PRODUCTION_MODE=true # false => e.g. enables database reset (in production mode not possible)
      - AMPERSAND_DBHOST=db # refers to database service below
      - AMPERSAND_DBUSER=${MYSQL_USER} # from .env file, which must be in the build environment
      - AMPERSAND_DBPASS=${MYSQL_PASSWORD} # from .env file
      - AMPERSAND_DBNAME=enroll
      - AMPERSAND_SERVER_URL=https://${SERVER_HOST_NAME} # from .env file
    labels:
      traefik.enable: "true"
      traefik.http.routers.enroll-insecure.rule: Host(`enroll.rap.cs.ou.nl`) || Host(`enroll.localhost`)
      # traefik.http.routers.enroll-insecure.middlewares: redirectToHttps@file,securityHeaders@file
      # traefik.http.routers.enroll.tls.certresolver: letsencrypt
      # traefik.http.routers.enroll.tls.options: safeTLSOptions@file
      # traefik.http.routers.enroll.middlewares: securityHeaders@file
      # traefik.http.routers.enroll.rule: Host(`enroll.rap.cs.ou.nl`)
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "100"
 
  db:
    container_name: rap3-db
    image: mariadb:10.4
    restart: unless-stopped
    command: ["--lower-case-table-names=1", "--sql-mode=ANSI,TRADITIONAL"]
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # from .env file, which must be in the build environment
      - MYSQL_USER=${MYSQL_USER} # from .env file
      - MYSQL_PASSWORD=${MYSQL_PASSWORD} # from .env file
    # nu nog de autorisaties voor user ${MYSQL_USER} instellen....
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - db
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "100"

  phptools:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: db # refers to database service above
    container_name: phptools
    restart: unless-stopped
    depends_on:
      - db
    ports:
      - "8080:80"
    networks:
      - db
