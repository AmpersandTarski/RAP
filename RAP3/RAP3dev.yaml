 # Sample config file for Ampersand
 # This file contains a list of all command line options that can be set using a config file
 # It can be used by specifying:  ampersand.exe --config=myConfig.yaml myModel.adl
 # remove the comment character (`#`) in front of the switches you want to activate.
 # Note: Make sure that the minus (`-`) characters are in exactly the same column. Yaml format is picky about that.

switches:
  ### verbose error message format.:
  - verbose

  ### Allow to build a prototype, even if there are invariants that are being violated. (See https://github.com/AmpersandTarski/Ampersand/issues/728):
  # - dev

  ### Compare results of rule evaluation in Haskell and SQL (requires command line php with MySQL support):
  # - validate

  ### generate a functional prototype (This overrules environment variable CCdirPrototype).:
  # - proto[=DIRECTORY]

  ### tag, branch or SHA of the prototype framework on Github.:
  - prototype-framework-version=development

  ### re-install the prototype framework. This discards any previously installed version.:
  # - force-reinstall-framework

  ### include a directory into the generated prototype, instead of the default.:
  - customizations=customizations;customizations-dev

  ### database name (This overrules environment variable CCdbName, defaults to filename):
  # - dbName=NAME

  ### set SQL host name (Defaults to `localhost`):
  # - sqlHost=HOSTNAME

  ### set SQL user name (Defaults to `ampersand`):
  # - sqlLogin=USER

  ### set SQL password (Defaults to `ampersand`):
  # - sqlPwd=PASSWORD

  ### generate binary tables only in SQL database.:
  # - sql-bin-tables

  ### generate interfaces.:
  # - interfaces

  ### export as plain Ampersand script.:
  # - export[=file]

  ### output directory (This overrules environment variable CCdirOutput).:
  # - outputDir=DIR

  ### prefix database identifiers with this namespace, in order to isolate namspaces.:
  # - namespace=NAMESPACE

  ### generate a functional design document in specified format (FORMAT=[Asciidoc, Context, Docbook, Docx, Html, Latex, Man, Markdown, Mediawiki, Opendocument, Org, Pandoc, Plain, Rst, Rtf, Texinfo, Textile]).:
  # - fspec=FORMAT

  ### Show contents and violations of specified rule.:
  # - testRule=RULE

  ### generate documentation with ECA rules.:
  # - ECA

  ### generate derivations.:
  # - proofs

  ### generate internal data structure, written in Haskell (for debugging).:
  # - haskell

  ### generate a dump of SQL queries (for debugging).:
  # - sqldump

  ### generate crowfoot notation in graphics.:
  # - crowfoot

  ### do not use colours in generated graphics:
  # - blackWhite

  ### generate graphics in an alternate way. (you may experiment with this option to see the differences for yourself):
  # - altGraphics

  ### omit the diagnosis chapter from the functional design document.:
  # - noDiagnosis

  ### diagnose your Ampersand script (generates a .pdf file).:
  # - diagnosis

  ### generate a table of references in the Natural Language chapter, for instance for legal traceability.:
  # - reference-table

  ### Generate a UML 2.0 data model.:
  # - uml

  ### Generate Function Point Analysis chapter.:
  # - fpa

  ### Generate an Excel workbook (FPA_<filename>.xml).:
  # - fpa-excel

  ### Generate an .xmlx file containing the populations of your script.:
  # - pop-xlsx

  ### Generate specifications of interfaces in EBV-format (http://www.justid.nl/ebv/).:
  # - ebc

  ### Pick 'NL' for Dutch or 'EN' for English, as the language to be used in your output. Without this option, output is written in the language of your context.:
  # - language=LANG

  ### Used for test purposes only.:
  # - test

  ### When set, generate the meta-tables of ampersand into the prototype:
  - meta-tables

  ### Generate an .adl file that contains the relations of formal-ampersand, populated with the the meta-population of your own .adl model.:
  # - meta-file

  ### When you use this switch, all relations from formal-ampersand will be available for use in your model. These relations do not have to be declared explicitly in your own model.:
  - add-semantic-metamodel

  ### Generate populations for use in RAP3.:
  # - gen-as-rap-model

  ### Temporary switch to create Atlas without expressions. (for RAP3):
  - atlas-without-expressions

  ### Do not generate static files into the prototype directory:
  # - no-static-files

  ### Temporary switch to learn about the semantics of crud in interface expressions.:
  # - crud-defaults=CRUD

  ### Use the old normalizer at your own risk.:
  # - oldNormalizer

  ### Use the new normalizer at your own risk.:
  # - newNormalizer

  ### Do not ignore leading and trailing spaces in .xlsx files that are INCLUDED in the script.:
  # - do-not-trim-cellvalues

