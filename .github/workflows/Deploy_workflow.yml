name: Deploy workflow

on:
  workflow_call:
    inputs:
      environment_name:
        description: Name of the environment to which is deployed
        required: true
        type: string

jobs:
  CheckEnvironment:
    environment: ${{ inputs.environment_name }}
    runs-on: ubuntu-latest
    outputs:
      environment-ok: ${{ steps.my-environment-check.outputs.defined }}
    steps:
      - name: Check for Environment availability
        id: my-environment-check
        # perform check & put boolean result as an output
        shell: bash
        run: |
          if [ "${{ vars.ENVIRONMENT_NAME }}" == ${{ inputs.environment_name }} ]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  #CheckRAP4USER:
  #  runs-on: ubuntu-latest
  #  outputs:
  #    hasChanged: ${{ steps.hasChanged.outputs.hasDiff }}
  #  steps:
  #    - uses: actions/checkout@v2
  #      with:
  #        # Checkout as many commits as needed for the diff
  #        fetch-depth: 2
  #    - shell: pwsh
  #      id: hasChanged
  #      run: |
  #        # Diff HEAD with the previous commit
  #        $diff = git diff --name-only HEAD^ HEAD
  #
  #        # Check if a file under RAP4USER/ has changed (added, modified, deleted)
  #        $SourceDiff = $diff | Where-Object { $_ -match '^RAP4USER/' }
  #        $HasDiff = $SourceDiff.Length -gt 0
  #
  #        # Set the output named "hasDiff"
  #        echo "hasDiff=$HasDiff" >> $Env:GITHUB_OUTPUT

  Build:
    environment: ${{ inputs.environment_name }}
    needs: [CheckEnvironment] #, CheckRAP4USER]
    if: ${{ needs.CheckEnvironment.outputs.environment-ok == 'true' }}
    runs-on: ubuntu-latest
    env:
      # Secrets
      LETSENCRYPT_PRIVATE_KEY: ${{ secrets.LETSENCRYPT_PRIVATE_KEY }}
      MYSQL_AMPERSAND_PASSWORD: ${{ secrets.MYSQL_AMPERSAND_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      # Variables
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      LETSENCRYPT_EMAIL: ${{ vars.LETSENCRYPT_EMAIL }}
      NAMESPACE_NAME: ${{ vars.NAMESPACE_NAME }}
      SERVER_HOST_NAME: ${{ vars.SERVER_HOST_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Instantiate manifest templates
        run: |
          echo Instantiating manifest templates using ${{ inputs.environment_name }}
          mkdir ${{ runner.temp }}/manifests
          cd ${{ github.workspace }}/deployment/manifest-templates
          #for t in *-template.yaml; do cp "$t" "${{ runner.temp }}/manifests/${t%-template.yaml}.yaml"; done
          for t in *-template.yaml; do 
            envsubst < $t > "${{ runner.temp }}/manifests/${t%-template.yaml}.yaml"
          done
          #envsubst < ${{ github.workspace }}/deployment/manifest-templates/cert-manager-namespace-template.yaml > ${{ runner.temp }}/manifests/cert-manager-namespace.yaml
          cd ${{ runner.temp }}/manifests
          for i in *.yaml; do 
            echo "##### Dumping $i" ; 
            cat "$i" ; 
          done
          
      #- name: Login to Docker Hub
      #  uses: docker/login-action@v2
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}

      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v2

      #- name: Build and push RAP4USER
      #  uses: docker/build-push-action@v4
      #  if: ${{ needs.CheckRAP4USER.outputs.hasChanged == 'True' }}
      #  with:
      #    context: ./RAP4USER
      #    file: ./RAP4USER/Dockerfile
      #    push: true
      #    tags: |
      #      ampersandtarski/rap4-student-prototype:${{ inputs.environment_name }}-latest
      #    cache-from: type=gha
      #    cache-to: type=gha,mode=max

      #- name: Build and push RAP4
      #  uses: docker/build-push-action@v4
      #  with:
      #    context: ./RAP4
      #    file: ./RAP4/Dockerfile
      #    push: true
      #    tags: |
      #      ampersandtarski/ampersand-rap:${{ inputs.environment_name }}-latest
      #    cache-from: type=gha
      #    cache-to: type=gha,mode=max

  #Deploy:
  #  environment: ${{ inputs.environment_name }}
  #  needs: Build
  #  runs-on: ubuntu-latest
  # steps:
  #    - name: Echoing variables
  #      run: |
  #        echo Echoing github.actor * ${{ github.actor }} *
  #        echo Echoing github.ref_name * ${{ github.ref_name }} *
  #        echo Echoing inputs.environment_name * ${{ inputs.environment_name }} *
  #        echo Echoing vars.ENVIRONMENT_NAME * ${{ vars.ENVIRONMENT_NAME }} *
  #    - name: Deploy steps
  #      run: |
  #        echo Deploying to ${{ inputs.environment_name }} ...
  #        echo Environment variable vars.ENVIRONMENT_NAME has value * ${{ vars.ENVIRONMENT_NAME }} *
