name: Deploy workflow

on:
  workflow_call:
    inputs:
      environment_name:
        description: Name of the environment to which is deployed
        required: true
        type: string

jobs:
  CheckEnvironment:
    environment: ${{ inputs.environment_name }}
    runs-on: ubuntu-latest
    outputs:
      environment-ok: ${{ steps.my-environment-check.outputs.defined }}
    steps:
      - name: Check for Environment availability
        id: my-environment-check
        # perform check & put boolean result as an output
        shell: bash
        run: |
          if [ "${{ vars.ENVIRONMENT_NAME }}" == ${{ inputs.environment_name }} ]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  CheckRAP4USER:
    runs-on: ubuntu-latest
    outputs:
      hasChanged: ${{ steps.hasChanged.outputs.hasDiff }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - shell: pwsh
        id: hasChanged
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Check if a file under RAP4USER/ has changed (added, modified, deleted)
          $SourceDiff = $diff | Where-Object { $_ -match '^RAP4USER/' }
          $HasDiff = $SourceDiff.Length -gt 0

          # Set the output named "hasDiff"
          echo "hasDiff=$HasDiff" >> $Env:GITHUB_OUTPUT

  Build:
    environment: ${{ inputs.environment_name }}
    needs: [CheckEnvironment, CheckRAP4USER]
    if: ${{ needs.CheckEnvironment.outputs.environment-ok == 'true' }}
    runs-on: ubuntu-latest
    env:
      # Secrets
      LETSENCRYPT_PRIVATE_KEY: ${{ secrets.LETSENCRYPT_PRIVATE_KEY }}
      MYSQL_AMPERSAND_PASSWORD: ${{ secrets.MYSQL_AMPERSAND_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      # Variables
      DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
      LETSENCRYPT_EMAIL: ${{ vars.LETSENCRYPT_EMAIL }}
      NAMESPACE_NAME: ${{ vars.NAMESPACE_NAME }}
      SERVER_HOST_NAME: ${{ vars.SERVER_HOST_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Instantiate manifest templates
        run: |
          echo Instantiating manifest templates using ${{ inputs.environment_name }}
          mkdir ${{ runner.temp }}/manifests
          cd ${{ github.workspace }}/deployment/manifest-templates
          for t in *-template.yaml; do 
            envsubst '$LETSENCRYPT_PRIVATE_KEY,$MYSQL_AMPERSAND_PASSWORD,$MYSQL_ROOT_PASSWORD,$DOMAIN_NAME,$LETSENCRYPT_EMAIL,$NAMESPACE_NAME,$SERVER_HOST_NAME' < $t > "${{ runner.temp }}/manifests/${t%-template.yaml}.yaml"
          done

      # Manifests will contain secrets. So deleting them after applying on Kubernetes might be wise.
      # Note that GitHub will itself also clean ${{ runner.temp }} during cleanup.
      # - name: Delete instantiated manifests
      #   run: |
      #     echo Deleting instantiated manifests
      #     rm ${{ runner.temp }}/manifests/*
      #     rmdir ${{ runner.temp }}/manifests

      # Uploading an artifact with manifest originals, templates and instances helps with debugging templates.
      # This artifact is only for debugging. the code can be deleted or commented-out when everything works.
      - name: Organize artifact source
        run: |
          echo Organizing artifact source
          mkdir ${{ runner.temp }}/manifests/instances
          mv ${{ runner.temp }}/manifests/*.yaml ${{ runner.temp }}/manifests/instances
          mkdir ${{ runner.temp }}/manifests/originals
          cp ${{ github.workspace }}/deployment/cert-manager/*.yaml ${{ runner.temp }}/manifests/originals
          cp ${{ github.workspace }}/deployment/ingress/*.yaml ${{ runner.temp }}/manifests/originals
          cp ${{ github.workspace }}/deployment/resources/*.yaml ${{ runner.temp }}/manifests/originals
          mkdir ${{ runner.temp }}/manifests/templates
          cp ${{ github.workspace }}/deployment/manifest-templates/*.yaml ${{ runner.temp }}/manifests/templates
      - name: Upload manifest artifact
        uses: actions/upload-artifact@v3
        with:
            name: instantiated-manifest-templates
            path: |
              ${{ runner.temp }}/manifests
    
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push RAP4USER
        uses: docker/build-push-action@v4
        if: ${{ needs.CheckRAP4USER.outputs.hasChanged == 'True' }}
        with:
          context: ./RAP4USER
          file: ./RAP4USER/Dockerfile
          push: true
          tags: |
            ampersandtarski/rap4-student-prototype:${{ inputs.environment_name }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push RAP4
        uses: docker/build-push-action@v4
        with:
          context: ./RAP4
          file: ./RAP4/Dockerfile
          push: true
          tags: |
            ampersandtarski/ampersand-rap:${{ inputs.environment_name }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    permissions: write-all
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.OU_TST_CLIENT_ID }}
          tenant-id: ${{ secrets.OU_TST_TENANT_ID }}
          subscription-id: ${{ secrets.OU_TST_SUBSCRIPTION_ID }}

      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: kubernetes-tst
          cluster-name: ampersand-rap-aks-tst

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: "rap"
          # namespace: "rap-${{ inputs.environment_name }}"
          manifests: |
            deployment/resources/rap-deployment.yaml
          images: |
            ampersandtarski/ampersand-rap:${{ inputs.environment_name }}-latest
