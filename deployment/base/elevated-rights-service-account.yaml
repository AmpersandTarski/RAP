# # Service account that is used to give a pod elevated rights in the Kubernetes cluster
# # https://trstringer.com/kubectl-from-within-pod/
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elevated-rights-service-account
---
# # Role that is used to give a pod elevated rights in the Kubernetes cluster
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: elevated-rights-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "watch", "list", "create", "delete", "patch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "watch", "list", "create", "delete", "patch"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "watch", "list", "create", "delete", "patch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "watch", "list", "create", "delete", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "watch", "list", "create", "delete", "patch"]

---
# # Role that is used to give a pod elevated rights in the Kubernetes cluster

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elevated-rights-rolebinding
subjects:
  - kind: ServiceAccount
    name: elevated-rights-service-account
    namespace: ${NAMESPACE_NAME}
roleRef:
  kind: Role
  name: elevated-rights-role
  apiGroup: rbac.authorization.k8s.io
