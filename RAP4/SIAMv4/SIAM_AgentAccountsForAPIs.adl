CONTEXT SIAM_AgentAccountsForAPIs
PURPOSE CONTEXT SIAM_AgentAccountsForAPIs
{+Webservers may provide APIs that allow other electronic components (which we call Agents)
to connect to that server through an Application Programming Interface (API).
This file provides the mechanisms that allow Agents to login to the webserver,
allowing it to do proper access control on the API's INTERFACEs.

To do this, we require an Agent to login with a unique identifier,
which we will call an APIKey, as this is a commonly used term for that.
A specific way we envisage to be used, is that of DIDs
(see https://w3c-ccg.github.io/did-spec/, or https://www.npmjs.com/package/did-document)

Regardless, APIKeys need to be registered in the server, in a similar way as we do for Userids.
The difference between an APIKey and a Userid is that an APIKey identifies an Agent, wheras
a Userid identifies a business actor. We use `Account`s for registering attributes of business actors.
We use `AgentAccount`s for registering attributes of Agents.

The setup of this is very similar to that of Userids.+}

--[AgentAccount basics]--
-- IDENT AgentAccounts: AgentAccount(agaccAPIKey,agaccPassword) -- Only needed when agaccAPIKey is not [INJ]
agaccAPIKey        :: AgentAccount * APIKey   [INJ,UNI,TOT] -- This APIKey is the name of, and identifies the AgentAccount.
agaccPassword      :: AgentAccount * Password     [UNI]     -- Not TOT, because we want to facilitate logins that use other mechanisms.
agaccIsInitialized :: AgentAccount * AgentAccount [PROP]
agaccIsActive      :: AgentAccount * AgentAccount [PROP]
agaccDeactivateReq :: AgentAccount * AgentAccount [PROP] -- An AgentAccount may have the property of being deactivated once it is not/no longer a sessionAgentAccount

ROLE ExecEngine MAINTAINS "Active agent accounts are initialized"
RULE "Active agent accounts are initialized": agaccIsActive |- agaccIsInitialized
VIOLATION (TXT "{EX} InsPair;agaccIsInitialized;AgentAccount;", SRC I, TXT ";AgentAccount;", TGT I)

ROLE ExecEngine MAINTAINS "Sessions with an inactive sessionAgentAccount may not exist"
RULE "Sessions with an inactive sessionAgentAccount may not exist": sessionAgentAccount |- sessionAgentAccount;agaccIsActive
VIOLATION (TXT "{EX} DelAtom;SESSION;", SRC I) -- i.e.: logout.

ROLE ExecEngine MAINTAINS "Request to deactivate sessionAgentAccount"
RULE "Request to deactivate sessionAgentAccount": agaccDeactivateReq |- sessionAgentAccount~;sessionAgentAccount
VIOLATION (TXT "{EX} DelPair;agaccIsActive;AgentAccount;", SRC I, TXT ";AgentAccount;", TGT I
          ,TXT "{EX} DelPair;agaccDeactivateReq;AgentAccount;", SRC I, TXT ";AgentAccount;", TGT I)

--[Sessions]--
sessionAgentAccount :: SESSION * AgentAccount [UNI] -- the AgentAccount that holds the default values for SESSION-variables.
sessionAPIKey       :: SESSION * APIKey       [UNI] -- the APIKey that identifies the AgentAccount that has been used to login

RULE "(Additional) (re)authentication must be for the same AgentAccount": sessionAPIKey;agaccAPIKey~ |- sessionAgentAccount

ROLE ExecEngine MAINTAINS "Determine the session's APIKey"
RULE "Determine the session's APIKey": sessionAgentAccount;agaccAPIKey |- sessionAPIKey
VIOLATION (TXT "{EX} InsPair;sessionAPIKey;SESSION;", SRC I, TXT ";APIKey;", TGT I)

--[Roles and their (de)activation]--
agaccAllowedRoles :: AgentAccount * Role
MEANING "An AgentAccount registers the Roles that MAY be activated in a SESSION to which the AgentAccount is assigned"
agaccDefaultRoles :: AgentAccount * Role
MEANING "An AgentAccount registers the Roles that ARE activated in a SESSION once the AgentAccount is assigned"

ROLE ExecEngine MAINTAINS "Default agent roles must be allowed agent roles"
RULE "Default agent roles must be allowed agent roles": agaccDefaultRoles |- agaccAllowedRoles
VIOLATION (TXT "{EX} DelPair;agaccDefaultRoles;AgentAccount;", SRC I, TXT ";Role;", TGT I)

--sessionAllowedRoles :: SESSION * Role
--MEANING "Within a SESSION, a Role may be activated"
ROLE ExecEngine MAINTAINS "Set allowed session roles in Agent sessions"
RULE "Set allowed session roles in Agent sessions": 
   sessionAgentAccount;agaccAllowedRoles |- sessionAllowedRoles
VIOLATION (TXT "{EX} InsPair;sessionAllowedRoles;SESSION;", SRC I, TXT ";Role;", TGT I)
ROLE ExecEngine MAINTAINS "Clear allowed session roles in Agent sessions"
RULE "Clear allowed session roles in Agent sessions": 
   sessionIsAgent;sessionAllowedRoles |- sessionAgentAccount;agaccAllowedRoles
VIOLATION (TXT "{EX} DelPair;sessionAllowedRoles;SESSION;", SRC I, TXT ";Role;", TGT I)

--sessionActiveRoles :: SESSION * Role
--MEANING "A SESSION has activated a Role"

ROLE ExecEngine MAINTAINS "Deactivate roles in an Agent session that are revoked from the Agent's Account"
RULE "Deactivate roles in an Agent session that are revoked from the Agent's Account":   (I-(sessionActiveRoles;sessionActiveRoles~));sessionAgentAccount;agaccDefaultRoles |- sessionActiveRoles
VIOLATION (TXT "{EX} InsPair;sessionActiveRoles;SESSION;", SRC I, TXT ";Role;", TGT I)

ROLE ExecEngine MAINTAINS "Deactivate roles in a session that are not/no longer allowed"
RULE "Deactivate roles in a session that are not/no longer allowed":
   sessionIsAgent;sessionActiveRoles
   |- sessionAgentAccount;agaccAllowedRoles
VIOLATION (TXT "{EX} DelPair;sessionActiveRoles;SESSION;", SRC I, TXT ";Role;", TGT I)

--[The Agent Role is available for all AgentAccounts]--

POPULATION Role CONTAINS [ "Agent" ] -- Every AgentAccount shall have the role 'User' (both as an Allowed and Default Role)

ROLE ExecEngine MAINTAINS "All Agent Accounts must have the role Agent"
RULE "All Agent Accounts must have the role Agent" : I[AgentAccount] |- agaccAllowedRoles;"Agent";agaccDefaultRoles~
VIOLATION (TXT "{EX}InsPair;agaccAllowedRoles;AgentAccount;", SRC I, TXT ";Role;Agent"
          ,TXT "{EX}InsPair;agaccDefaultRoles;AgentAccount;", SRC I, TXT ";Role;Agent"
          )

--[System Roles]--
--systemRole :: Role * Role [PROP] -- Roles that are not allowed for any User Account (including 'god-accounts).
POPULATION systemRole CONTAINS [ ("Agent","Agent") ] -- Users cannot access APIs

--[Navigation after succesful login/logout]

--CONCEPT NavToIfc "Alphanumeric text that represents an INTERFACE" REPRESENT NavToIfc TYPE ALPHANUMERIC

--sessionIfcsSet :: SESSION * SESSION [PROP] -- The default interfaces for anonymous- and Agent-sessions have been set.
--sessionAnonIfc :: SESSION * NavToIfc [UNI] -- Name of default interface for anonymous sessions
--sessionUserIfc :: SESSION * NavToIfc [UNI] -- Name of default interface for User sessions
sessionAPI     :: SESSION * NavToIfc [UNI] -- Name of default interface for Agent sessions

ROLE ExecEngine MAINTAINS "Session NavTo interfaces have been set for Agent sessions"
RULE "Session NavTo interfaces have been set for Agent sessions": 
   I /\ sessionAPI;sessionAPI~ |- sessionIfcsSet
VIOLATION (TXT "{EX} InsPair;sessionIfcsSet;SESSION;", SRC I, TXT ";SESSION;", TGT I)

ENDCONTEXT