CONTEXT RAP
-- This module describes the operational semantics of Interfaces.

PATTERN "Data objects"
    PURPOSE CONCEPT Field
    {+The concept of Field is used to link the content of a term to data in an interface.+}
    CONCEPT Field "A field is a labeled part of an object, which displays a number of atoms." ""
    RELATION field[Div*Field] [UNI,TOT]
    MEANING "Each Div corresponds to precisely one field in an object. We represent only the DIV-sections that are used to create, read, update, or delete atoms (Hence this relation is total)."

    PURPOSE RELATION content[Div*Atom]
    {+To determine which atoms are shown at any moment in time, we use the relation "content".
    For every DIV-section used by Ampersand to display atoms, this relation says which atoms are in which DIV-section.+}
    RELATION content[Div*Atom] [UNI]
    MEANING "Each DIV-section may contain an atom, which is visible to the user."
    CONCEPT Object "An object is (part of) a hierarchical structure that contains data as defined by a corresponding ObjectDef. The object is an instance of an ObjectDef." ""
    RELATION fieldIn[Field*Object] [UNI,TOT]
    MEANING "Each Field corresponds to precisely one object."
    CLASSIFY FieldDef ISA ObjectDef
    RELATION selfAtom[Object*Atom] [UNI,TOT]
    RELATION def[Object*ObjectDef] [UNI,TOT]
    MEANING "Each Object is related to the ObjectDef of which it is an instance."
    RELATION pair[Field*Pair]
    MEANING "All pairs of which the right atoms (rAtom) are displayed are in the relation pair."
    RELATION def[Field*FieldDef] [UNI,TOT]
    MEANING "Each Field is related to the FieldDef of which it is an instance."
    RELATION eval[Term*Pair]
    MEANING "This relation contains the pairs that are obtained by evaluating the term. The combination of a pair and an term yields a statement or a phrase, which makes sense to users."

    PURPOSE RULE "Object definitions"
    {+ To maintain strong typing we impose that every object satisfies its definition.+}
    RULE "Object definitions" : def;fieldIn = fieldIn;def
    MEANING "Every field in an object is defined in the field definition of that object's definition."

    PURPOSE RULE "DelPair pair"  -- , "InsPair pair"
    {+ The pairs in a field are determined by evaluating the term in the definition of the field,
    restricted to those with this object's left atom.+}
    ROLE ExecEngine MAINTAINS "DelPair pair", "InsPair pair"
    RULE "DelPair pair" : pair |- def[Field*FieldDef];eval /\ fieldIn;selfAtom;lAtom~
    VIOLATION ( TXT "{EX} DelPair;pair;Field;", SRC I, TXT ";Pair;", SRC I )
    RULE "InsPair pair" : def[Field*FieldDef];eval /\ fieldIn;selfAtom;lAtom~ |- pair
    VIOLATION ( TXT "{EX} InsPair;pair;Field;", SRC I, TXT ";Pair;", SRC I )

    RULE lksjdflksdj : def;(edit\/editFlp) |- field~;(I[Div]-content;content~);V

    PURPOSE RULE "Create new DIV-section"
    {+ If the population of a field changes, this is visible in the relation "pair".
    For each pair, there should be a DIV-section in the interface to display it.
    So pairs created that show up in a field yield a new DIV-section to display an atom.
    A pair removed leads to the removal of the corresponding DIV-section. +}
    ROLE ExecEngine MAINTAINS "Create new DIV-section", "Delete DIV-section"
    RULE "Create new DIV-section" : pair;rAtom |- field~;content
    VIOLATION ( TXT "{EX} InsAtom;Div"
              , TXT "{EX} InsPair;field;Div;_NEW;Field;", SRC I
              , TXT "{EX} InsPair;content;Div;_NEW;Field;", TGT I
              )
    RULE "Delete DIV-section" : content |- field;pair;rAtom
    VIOLATION ( TXT "{EX} DelAtom;Div;", SRC I)
ENDPATTERN

PURPOSE PATTERN "Interface events"
{+This pattern describes how an insertion in a DIV-section on the screen
causes the desired insertion of a pair in a relation.+}
PATTERN "Interface events"
    PURPOSE CONCEPT InsAtom
    {+This event causes a new atom in a DIV-section of the user interface.+}
    CONCEPT InsAtom "An InsAtom event inserts an atom in a DIV-section of a user interface." ""
    CLASSIFY InsAtom ISA Event
    RELATION div[InsAtom * Div]
    RELATION atom[InsAtom * Atom]

    ROLE ExecEngine MAINTAINS "userFillsDiv"
    RULE userFillsDiv :
      div~;I[InsAtom];atom |- content
    VIOLATION ( TXT "{EX} DelPair;content;DivSection;", SRC I, TXT ";Atom;", SRC content
              , TXT "{EX} InsPair;content;DivSection;", SRC I, TXT ";Atom;", TGT I
              )

    PURPOSE RULE InsertInField
    {+To insert an atom in an empty interface field results in the creation of a pair.
    This pair is inserted in the appropriate relation.
    Note that this can only be done if the term of that field is editable,
    i.e. one of `edit` or `editFlp` is populated.
    +}
    ROLE ExecEngine MAINTAINS "InsertInField"
    RULE InsertInField :
      field~;div~;atom
        |- (selfAtom;lAtom~ /\
            def;(edit\/editFlp);in~)
           ;rAtom
    MEANING "To insert an atom in a field means to insert a pair in the relation that corresponds to that field."
    VIOLATION ( TXT "{EX} InsAtom;Pair"
              , TXT "{EX} InsPair;lAtom;Pair;_NEW;Atom;", SRC selfAtom
              , TXT "{EX} InsPair;in;Pair;_NEW;Relation;", SRC def;(edit\/editFlp)
              , TXT "{EX} InsPair;rAtom;Pair;_NEW;Atom;", TGT I
              , TXT "{EX} InsPair;"
              , SRC def;(edit\/editFlp);name[Relation*RelationName], TXT ";"  -- <relation name>
              , SRC def;(edit;target\/editFlp;source), TXT ";"                -- <source concept>
              , SRC selfAtom, TXT ";"                                -- <source atom>
              , SRC def;(edit;source\/editFlp;target), TXT ";"                -- <target concept>
              , TGT I                                                         -- <target atom>
              )

--    PURPOSE RULE RemoveFromField
--    {+To remove an atom from an interface field (i.e. the `minus`-icon. Not the `bin`-icon) results
--    in the deletion of a pair from the appropriate relation.
--    +}
--    ROLE ExecEngine MAINTAINS "RemoveFromField"
--    RULE RemoveFromField :
--      field~;(I[Div]/\content;content~);div~
--        |- (selfAtom;lAtom~ /\ def;(edit\/editFlp);in~);rAtom
--    MEANING "To insert an atom in a field means to insert a pair in the relation that corresponds to that field."
--    VIOLATION ( TXT "{EX} DelPair;"
--              , SRC def;(edit\/editFlp);name, TXT ";"           -- <relation name>
--              , SRC def;(edit;target\/editFlp;source), TXT ";"  -- <source concept>
--              , SRC selfAtom, TXT ";"                  -- <source atom>
--              , SRC def;(edit;source\/editFlp;target), TXT ";"  -- <target concept>
--              , TGT I                                           -- <target atom>
--              )
ENDPATTERN

{- HJO, 20170825 Disabled this rule, for kleenePlus is currently not supported by the database 
RULE "possible inputs" : ifcInputs |- fieldIn~+;getTermRelation
MEANING "Allow only those input relations that have an editable field inside the interface."
MESSAGE "Unusable input relation in interface:"
VIOLATION (TXT "Relation ", TGT I, TXT " has no editable field in interface ", SRC I)
RULE "accessible relations" : V[Context*Interface];getTermRelation
MEANING "For every relation that is potentially editable, there exists an interface through which it can be accessed."
ROLE "FormalAmpersand" MAINTAINS "accessible relations"
-}
ENDPATTERN

{-
PATTERN InterfaceSession
RELATION sessAtom[SESSION*Atom] [UNI,TOT]
MEANING "Each session has a root atom, from which all data in the current interface is accessible."
RELATION sessIfc[SESSION*Interface] [UNI,TOT]
MEANING "Each session has a current interface."
RELATION sessionRole[SESSION*Role] [UNI,TOT]
MEANING "The current role of the session user is registered with the session a user is in."
RULE "Current role" : sessIfc |- sessionRole;ifcRoles~ \/ -(V;ifcRoles~)
MEANING "Each session has a current interface, which is linked to one of the roles allowed for that interface, or to any interface if no roles are specified."
RULE "Current atom" : sessIfc |- sessAtom;right~;in
MEANING "Each session has a current interface, which is linked to one of the roles allowed for that interface, or to any interface if no roles are specified."
ENDPATTERN
-}

PATTERN InterfaceSemantics
    CONCEPT Transaction "A transaction is an instance of an interface, which is being used (by a user or a program) to interact with the system."   -- Transactions reside in the front end.
    CONCEPT Object "An object is an instance of an ObjectDef."  -- Objects reside in the front end.
    CONCEPT Act "An act is an event that inserts or deletes a set of pairs in a relation."   -- Acts occur in the front end.
    
    RELATION fieldIn[FieldDef*ObjectDef] [UNI,TOT]
    MEANING "Every field belongs to an ObjectDef."
    CLASSIFY Field ISA Object
    RULE "fields in objects" : selfAtom |- pair;lAtom
    MEANING "A left atom in a field of an object is the right atom in that object's instance."
    RULE "fields with unique names" : -I[FieldDef] |- label;-I;label~
    MEANING "Every field within one object definition has a unique name."
    VIOLATION (TXT "Multiple fields are labeled identically: ", SRC label)
    
    RELATION transactionObject[Transaction*Object] [UNI,TOT]
    MEANING "Each Ampersand transaction has a transaction object, in which the front end administers the progress of a transaction."
    RELATION inst[Transaction*Interface] [UNI,TOT]
    MEANING "Because each transaction is an instance of an interface, we need to know that interface."
    RELATION delta[Act*Pair]
    MEANING "The pairs that are inserted or deleted by an act are known as the delta."
    RELATION changes[Act*Relation] [UNI,TOT]
    MEANING "The relation affected by an act."
    RELATION inQ[Quad*Act] [UNI,TOT]
    MEANING "The act that causes a Quad to fire."
    RELATION outQ[Quad*Act]
    MEANING "The acts that can be caused by a Quad firing."
    RULE quadsInInterface : ifcQuads = ifcInputs;changes~;inQ~ /\ ifcOutputs;changes~;outQ~
    MEANING "An interface contains those quads that are fired by its inputs and that produce changes in its outputs."
ENDPATTERN

ENDCONTEXT